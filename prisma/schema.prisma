generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  subdomain   String?  @unique
  createdAt   DateTime @default(now())
  users       User[]
  settings    CompanySettings?
  customers   Customer[]
  properties  Property[]
  chemicals   Chemical[]
  serviceTemplates ServiceTemplate[]
  tierRules   TierRule[]
  quotes      Quote[]
  files       File[]
  invites     Invite[]
  auditLogs   AuditLog[]
  serviceRecipeItems ServiceRecipeItem[]
  quoteLineItems QuoteLineItem[]
  quoteCalcSnapshots QuoteCalcSnapshot[]
  pricingPresets PricingPreset[]
}

model User {
  id           String   @id @default(cuid())
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  email        String
  passwordHash String
  role         Role
  name         String
  createdAt    DateTime @default(now())

  @@unique([organizationId, email])
  auditLogs    AuditLog[]
}

enum Role {
  Owner
  Manager
  Estimator
  Viewer
}

model CompanySettings {
  id                  String   @id @default(cuid())
  organization        Organization @relation(fields: [organizationId], references: [id])
  organizationId      String   @unique
  currency            String
  taxRate             Float
  unitsArea           String
  unitsVolume         String
  roundingRule        String
  pricingMode         String
  targetMargin        Float
  defaultMarkup       Float
  hourlyWage          Float
  burdenPercent       Float
  crewSize            Int
  travelFixedMin      Int
  travelMinsPerMile   Float
  minJobPrice         Float
  quoteExpiryDays     Int
  termsText           String
  brandPrimaryFrom    String
  brandPrimaryTo      String
  brandAccent         String
  logoUrl             String?
  address             String?
  phone               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Customer {
  id           String   @id @default(cuid())
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  type         String
  name         String
  email        String?
  phone        String?
  createdAt    DateTime @default(now())
  properties   Property[]
}

model Property {
  id             String   @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  customer       Customer @relation(fields: [customerId], references: [id])
  customerId     String
  propertyType   String
  address        String
  area           Float
  notes          String?
  createdAt      DateTime @default(now())
  quotes         Quote[]
}

model Chemical {
  id            String   @id @default(cuid())
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  name          String
  vendorSku     String?
  packageSize   Float
  packageUnit   String
  packageCost   Float
  concentration Float?
  wastePercent  Float
  notes         String?
  createdAt     DateTime @default(now())
  recipeItems   ServiceRecipeItem[]

  @@unique([organizationId, name], name: "organizationId_name")
  @@index([organizationId, name])
}

model ServiceTemplate {
  id            String   @id @default(cuid())
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  name          String
  description   String?
  mainUnit      String
  setupTimeHrs  Float
  timePer1000Hrs Float
  minPrice      Float
  defaultInfestationMultiplier Float
  defaultComplexityMultiplier Float
  residentialMultiplier Float
  commercialMultiplier Float
  createdAt     DateTime @default(now())
  recipeItems   ServiceRecipeItem[]
  tierRules     TierRule[]
  quotes        Quote[]
}

model ServiceRecipeItem {
  id               String   @id @default(cuid())
  organization     Organization @relation(fields: [organizationId], references: [id])
  organizationId   String
  serviceTemplate  ServiceTemplate @relation(fields: [serviceTemplateId], references: [id])
  serviceTemplateId String
  chemical         Chemical @relation(fields: [chemicalId], references: [id])
  chemicalId       String
  useFor           String
  usageRatePer1000 Float
  notes            String?
}

model TierRule {
  id               String   @id @default(cuid())
  organization     Organization @relation(fields: [organizationId], references: [id])
  organizationId   String
  serviceTemplate  ServiceTemplate @relation(fields: [serviceTemplateId], references: [id])
  serviceTemplateId String
  propertyType     String
  fromArea         Float
  toArea           Float?
  priceFloor       Float?
  pricePer1000Override Float?
}

model Quote {
  id            String   @id @default(cuid())
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  quoteNumber   String
  property      Property @relation(fields: [propertyId], references: [id])
  propertyId    String
  serviceTemplate ServiceTemplate @relation(fields: [serviceTemplateId], references: [id])
  serviceTemplateId String
  status        String
  subtotal      Float
  tax           Float
  total         Float
  pricingModeSnapshot String
  marginOrMarkupValue Float
  expiresAt     DateTime
  pdfKey        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lineItems     QuoteLineItem[]
  snapshot      QuoteCalcSnapshot?

  @@unique([organizationId, quoteNumber])
}

model QuoteLineItem {
  id            String   @id @default(cuid())
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  quote         Quote @relation(fields: [quoteId], references: [id])
  quoteId       String
  kind          String
  label         String
  qty           Float?
  unit          String?
  unitCost      Float?
  amount        Float
  isOverride    Boolean?
  overrideReason String?
}

model QuoteCalcSnapshot {
  id            String   @id @default(cuid())
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  quote         Quote @relation(fields: [quoteId], references: [id])
  quoteId       String @unique
  json          Json
}

/// Stores reusable pricing configurations users can quickly apply to new quotes.
model PricingPreset {
  id                String   @id @default(cuid())
  organization      Organization @relation(fields: [organizationId], references: [id])
  organizationId    String
  name              String
  pricingMode       String   // 'margin' | 'markup'
  marginOrMarkup    Float
  hourlyWage        Float
  burdenPercent     Float
  taxRate           Float
  roundingRule      String   // 'nearest_1' | 'nearest_5' | 'psychological_9'
  minimum           Float
  travelFixedMin    Int
  travelMinsPerMile Float
  fees              Float    @default(0)
  discounts         Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([organizationId, name])
}

model File {
  id           String   @id @default(cuid())
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  kind         String
  s3Key        String
  url          String
  createdAt    DateTime @default(now())
}

model Invite {
  id           String   @id @default(cuid())
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  email        String
  role         String
  token        String @unique
  expiresAt    DateTime
  acceptedAt   DateTime?
}

model AuditLog {
  id           String   @id @default(cuid())
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  user          User? @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  before        Json?
  after         Json?
  createdAt     DateTime @default(now())
}
